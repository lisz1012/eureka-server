eureka:
  client:
    service-url:
      defaultZone: http://lisz:123@eureka-7900:7900/eureka/,http://lisz:123$eureka-7901:7901/eureka/
server:
  port: 83
spring:
  application:
    name: user-consumer
  # 每个微服务都向这个地址上报信息
  zipkin:
    base-url: http://192.168.1.102:9411
  # zipkin也需要这个
  sleuth:
    sampler:
      rate: 1
  # springboot admin配置，pom添加依赖后要加上这个，上报至某个url
  boot:
    admin:
      client:
        url: http://192.168.1.102:8080

feign:
  hystrix:
    enabled: true
# ribbon的重试机制，retry期间可以看到浏览器进度条一直不消失，显示还在load页面
ribbon:
  ConnectTimeout: 1000
  ReadTimeout: 2000
  MaxAutoretries: 3
  MaxAutoRetriesNextServer: 3
  OkToRetryOnAllOperations: false
# Hystrix（像个 try catch）主要做的是熔断、降级、隔离。
# 两种资源隔离方式：线程池隔离是THREAD，信号量隔离是：SEMAPHORE (Dashboard上就不显示Threadpool了，那信号量隔离，没有用线程池)
# SEMAPHORE是用信号量，服用Tomcat的worker线程池，每个线程适合处理计算密集型任务；而THREAD是开新的线程池，适合Hang住的、IO密集型任务。
# 后者不会让住线程Hang住，由于多是一部网络调用，线程池自身就有可能出现各种问题。线程等待的时候是不消耗资源的，而我们的目的是压榨服务器的资源，
# 让他尽量多消耗资源。后者整个线程池挂了，也不会影响其他的线程池，做到了隔离。Servlet3.1和3.0的唯一的区别是前者worker是非阻塞的，异步执行
# 两类请求：远程服务调用和本地服务调用，一般不让比较耗时的远程服务调用和IO请求占用本地的worker线程，而是留给本地服务。THREAD直接干脆令开辟线程池。
# 用信号量做隔离的时候，要求代码要足够健壮，不能把整个Tomcat worker线程池弄坏了
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: THREAD
# springboot admin配置，pom添加依赖后要加上这个
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
#设置Hystrix隔离策略为线程池
zuul:
  ribbon-isolation-strategy: thread
  #每个路由使用独立的线程池
  thread-pool:
    use-separate-thread-pools: true